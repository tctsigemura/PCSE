/*
 * TaC-OS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2013 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * kernel/kernel.h : システムコール定義 (旧 syscall.h)
 *
 * 2013.05.20           : 名前を変更 kernel.h に変更
 * 2013.05.20           : ファイルシステムのサービを ../fatFs/fsServ.h へ移動
 * 2011.05.20           : 新規作成
 *
 * $Id$
 *
 */

/*----------------------------------------------------------------------------
 * プロセスの新規作成
 *   名前   : newProc
 *   戻り値 : int プロセス番号
 *   引数   : int start  プロセスの実行開始アドレス
 *            int stkSiz プロセス用のスタックのサイズ(ワード単位)
 *            int nice   プロセスの優先度(0:最高優先度、P_LOW_PRI:最低優先度)
 *   解説   : newProc システムコールは、PCB を作成しプロセスを実行可能にする。
 */
public int newProc(int start, int stkSiz, int nice);

/*----------------------------------------------------------------------------
 * セマフォの新規作成
 *   名前   : newSem
 *   戻り値 : int セマフォ番号
 *   引数   : int init セマフォの初期値
 *   解説   : newSem システムコールは、初期値を指定してセマフォを作成する。
 */
public int newSem(int init);

/*----------------------------------------------------------------------------
 *   名前   : dspProc
 *   戻り値 : なし
 *   引数   : なし
 *   解説   : dspProc システムコールは、カーネルにディスパッチのチャンスを
 *            与える。iSemV システムコールを使用した後に利用する。
 */
public void dspProc();

/*----------------------------------------------------------------------------
 *   名前   : iSemV
 *   戻り値 : boolean 起床したプロセスがあるかどうか(ある=true)
 *   引数   : int セマフォ番号
 *   解説   : iSemV システムコールは指定されたセマフォに V 操作を行う。
 *            その結果、起床したプロセスがあってもディスパッチャを呼ばない。
 *            割込みハンドラ内で、複数のプロセスをまとめて起こす場合等に
 *            使用する。
 */
public boolean iSemV(int s);

/*----------------------------------------------------------------------------
*   名前   : semV
 *   戻り値 : なし
 *   引数   : int セマフォ番号
 *   解説   : semV システムコールは指定されたセマフォに V 操作を行う。
 *            その結果、起床したプロセスがあった場合は自動的にディスパッチャ
 *            を呼び出す。
 */
public void semV(int s);

/*----------------------------------------------------------------------------
*   名前   : semP
 *   戻り値 : なし
 *   引数   : int セマフォ番号
 *   解説   : semP システムコールは指定されたセマフォに P 操作を行う。
 *            値が 0 以下のセマフォに P 操作した場合、プロセスがブロックする。
 */
public void semP(int s);

/*----------------------------------------------------------------------------
 *   名前   : sleep
 *   戻り値 : なし
 *   引数   : int 時間
 *   解説   : 時間を指定してプロセスをスリープさせる。時間の単位は ms である。
 */
public void sleep(int ms);

/*----------------------------------------------------------------------------
 *   名前   : malloc
 *   戻り値 : 領域のアドレス
 *   引数   : int ワード数
 *   解説   : ワード数で指定された領域を確保する
 */
public void[] malloc(int s);

/*----------------------------------------------------------------------------
 *   名前   : free
 *   戻り値 : なし
 *   引数   : malloc が割り付けた領域
 *   解説   : malloc が割り付けた領域をシステムに返却する
 */
public void free(void[] mem);
