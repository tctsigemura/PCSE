/*
 * TaC-OS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2013 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 *  kernel/kernMemory.cmm : TaC-OS メモリ管理
 *
 * 2011.05.20           : 新規作成
 *
 * $Id$
 *
 */

#include <util.h>
#include "kernel.h"
#include "kernAsm.h"
#include "kernMemory.h"

struct mblock {                                 // malloc がメモリを管理する
  mblock next;                                  //   ためのデータ構造
  int     size;
};

mblock mempool;                                 // 空き領域リストのルート

public void memInit() {                         // プログラム起動前の初期化
  mempool = __end();                            // 空き領域リストに番兵を
  mempool.size = 0;                             // 作る．size=0によって結合
                                                // される可能性がなくなる
  mempool.next = __AddrAdd(mempool,2);          // 空き領域
  mempool.next.size = __memsize() - 2;          // 空きメモリサイズ
  mempool.next.next = null;
}

/*
 * メモリを割り付ける(システムコール)
 */
public void[] malloc(int s) {                   // メモリ割り当て
  int r = setPri(0);                            // 割込み禁止
  s=s+2;                                        // 制御データ分大きく

  mblock p = mempool;                           // 直前の領域
  mblock m = p.next;                            // 対象となる領域

  while (__ucmp(m.size,s)<0) {                  // 領域が小さい間
    p = m;                                      // リストを手繰る
    m = m.next;
    if (m==null)                                // リストの最後まできた
      panic("malloc: no enough memory\n");
  }

  if (m.size==s||m.size==s+1||m.size==s+2) {    // ほぼ、ピッタリの領域だ
    p.next = m.next;
  } else {                                      // 領域を分割する価値がある
    int ss = m.size - s;                        // ss は最低でも 3
    mblock q = __AddrAdd(m, s);                 // 残り領域
    q.next = m.next;
    q.size = ss;
    p.next = q;
    m.size = s;
  }
  m.next = __end();                             // マジックナンバー格納
  setPri(r);                                    // 割込み許可
  return __AddrAdd(m, 2);                       // 管理領域を除いて返す
}

void badaddr() {
   panic("free: bad address\n");
}

/*
 * メモリを解放する(システムコール)
 */
public void free(void[] t) {                    // 領域解放
  int r = setPri(0);                            // 割込み禁止
  mblock q  = __AddrAdd(t, -2);                 // 解放する領域
  mblock p = mempool;                           // 直前の空き領域
  mblock m = p.next;                            // 直後の空き領域

  if (q.next!=__end()) badaddr();               // 領域マジックナンバー確認

  while (__acmp(m, q)<0) {                      // 解放する領域の位置を探る
    p = m;
    m = m.next;
    if (m==null) break;
  }

  void[] ql = __AddrAdd(q,q.size);              // 解放する領域の最後
  void[] pl = __AddrAdd(p,p.size);              // 直前の領域の最後

  if (__acmp(q,pl)<0||m!=null&&__acmp(m,ql)<0)  // 未割り当て領域では？
    badaddr();

  if (pl==q) {                                  // 直前の領域に隣接している
    p.size = p.size + q.size;
    if (ql==m) {                                // 直後の領域とも隣接してる
      p.size = p.size + m.size;
      p.next = m.next;
    }
  } else if (m==null) {                         // ヒープの最後の部分
    p.next = q;
    q.next = null;
  } else if (ql==m) {                           // 直後の領域に隣接している
    q.size = q.size + m.size;
    q.next = m.next;
    p.next = q;
  } else {
    p.next = q;
    q.next = m;
  }
  setPri(r);                                    // 割込み許可
}
