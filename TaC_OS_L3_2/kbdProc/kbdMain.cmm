/*
 * TaC-OS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2013 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * kbdProc/kbdMain.cmm : キーボードドライバの使用例
 *
 * 2013.05.21           : player プロセスの外部インタフェース変更に対応
 * 2011.07.04           : player プロセスと接続
 * 2011.05.20           : 新規作成
 *
 * $Id$
 *
 */

#include <util.h>
#include <vgaWin.h>           // 画面管理のために必要
#include <kernel.h>           // メモリ管理のために必要
#include <fatFs.h>            // ファイルアクセスのために必要

#include "../playerProc/playerProc.h"

#include "kbdProc.h"
#include "kbd.h"
#include "scConv.h"

WIN win;

// キーボードから１文字入力する
char getc() {
  char c = getKeyCode();             // スキャンコード取得
  c = scConv(c);                     // 文字コードへ変換
  return c;
}

// キーボードから１行入力する
#define LMAX 57                                     // 1行最大57文字
char[] lbuf = array(LMAX+1);
int kbdCnt = 0;
void getLBuf() {
  for (;;) {
    char c = getc();
    if (0x20<=c && c<=0x7e && kbdCnt<LMAX) {          // 表示可能な文字なら
      lbuf[kbdCnt] = c;
      wPutc(win, c);
      kbdCnt = kbdCnt + 1;
    } else if (c=='\x08'&& kbdCnt>0) {                 // バックスペースなら
      wPutc(win, '\x08');
      wPutc(win, ' ');
      wPutc(win, '\x08');
      kbdCnt = kbdCnt - 1;
    } else if (c=='\r' || c=='\n') {                  // 改行なら
      lbuf[kbdCnt] = '\0';
      kbdCnt = 0;
      wPutc(win, '\n');
      break;
    }
  }
}

// 16進ダンプ(デモ用)
void wDumpBuf(WIN win, int base, char[] buf, int len) {
  for (int i=0; i<len; i=i+16) {
    wPrintf(win, "%04x :", base + i);
    for (int j=0; j<16; j=j+1)
      if (i+j<len) wPrintf(win, " %02x", byte(buf, i+j));
    wPrintf(win, "\n");
  }
}

// プロセスの初期化
public void kbdProcInit() {
  kbdInit();
}

// s[ptr] からの空白区切り文字列を d に取り出す
int getStr(char[] s, int ptr, char[] d) {
  while (s[ptr]==' ')
    ptr = ptr + 1;

  int i=0;
  while (s[ptr]!='\0' && s[ptr]!=' ') {
    d[i] = s[ptr];
    i = i + 1;
    ptr = ptr + 1;
  }

  d[i] = '\0';
  return ptr;
}

// 文字列比較
int strCmp(char[] s1, char[] s2) {
   int i=0;
   while (s1[i]==s2[i] && s1[i]!='\0')
     i = i + 1;
   return s1[i]-s2[i];
}

// ファイルの表示
void catFile(char[] fname) {
  int fd = open(READ, fname);
  if (fd<0) {
    wPrintf(win, "can't open File \"%s\"\n", fname);
  } else {
    char [] dbuf = malloc(256);
    int len;
    while ((len=read(fd,dbuf,512))>0) {
      for (int i=0; i<len; i=i+1)
         wPrintf(win, "%c", byte(dbuf, i));
    }
    free(dbuf);
    close(fd);
  }
}


void dumpFile(char[] fname) {
  int fd = open(0, fname);
  if (fd<0) {
    wPrintf(win, "can't open File \"%s\"\n", fname);
  } else {
    char [] dbuf = malloc(256);
    int len;
    for(int b=0; (len=read(fd,dbuf,512))>0; b=b+512) {
      wDumpBuf(win, b, dbuf, len);
    }
    free(dbuf);
    close(fd);
  }
}

// ファイルの一覧
DIR dir = {null, 0, 0, 0, 0};

void listFile(char[] dname) {
  if (dir.name==null) dir.name = malloc(13);
  int fd = openDir(dname);
  if (fd<0) {
    wPrintf(win, "can't open Dir \"%s\"\n", dname);
  } else {
    wPrintf(win, "FileName.Ext Attr Clst FileLength\n");
    while (readDir(fd, dir)>0) {
      wPrintf(win, "%s 0x%02x %4d 0x%04x%04x\n",
                    dir.name, dir.attr, dir.clst, dir.lenH, dir.lenL);
    }
    close(fd);
  }
}

// プロセスのメインルーチン
char[] tbuf = array(LMAX+1);

public void kbdMain() {
  kbdInit();                         // キーボード初期化

  win = newWin(0,0,25,60);           // ウインドを作って
  wClear(win);                       // クリア

  for (int y=0; y<25; y=y+1) {       // ウインドの右端に線を引く
    wMove(win, y, 59);
    wPrintf(win, "|");
  }

  wSetProp(win, 0,0,25,59);          // ウインドの大きさ等を変更する

  wPrintf(win, "TaC-OS Modoki Shell\n");
  for (;;) {
    wPrintf(win, "$ ");              // プロンプトのつもり
    getLBuf();
    int p = getStr(lbuf, 0, tbuf);
    if (strCmp(tbuf, "cat")==0) {
      getStr(lbuf, p, tbuf);
      catFile(tbuf);
    } else if (strCmp(tbuf, "dump")==0) {
      getStr(lbuf, p, tbuf);
      dumpFile(tbuf);
    } else if (strCmp(tbuf, "ls")==0) {
      getStr(lbuf, p, tbuf);
      listFile(tbuf);
    } else if (strCmp(tbuf, "play")==0) {
      getStr(lbuf, p, tbuf);
      play(tbuf);
    } else if (strCmp(tbuf, "stop")==0) {
      stop();
    } else if (strCmp(tbuf, "exit")==0) {
      return;                               // わざとエラー(run away テスト)
    } else {
      wPrintf(win, "unknown command!\n");
    }
  }
}
