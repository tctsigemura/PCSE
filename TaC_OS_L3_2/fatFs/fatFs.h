/*
 * TaC-OS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2013 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * fatFs/fatFs.h : ハードディスクドライバの外部インタフェース
 *
 * 2013.05.20           : ../kern/syscall.h から fatFs のサービスを分離
 * 2011.05.23           : Boot-- をもとに新規作成
 *
 * $Id$
 *
 */

#include <dirEnt.h>

/*----------------------------------------------------------------------------
 *   名前   : open
 *   戻り値 : int (ファイル番号(>=0)、-1=エラー)
 *   引数   : int mod ファイルのオープンモード(READ/WRITE)
 *            char[] path ファイルへのパス
 *   解説   : ファイルをオープンし、ファイル番号を返す。
 *            # 現在のところ READ モードのオープンしかサポートしていない
 */
#define READ  0
#define WRITE 1
public int open(int mod, char[] path);

/*----------------------------------------------------------------------------
 *   名前   : openDir
 *   戻り値 : int (ファイル番号(>=0)、-1=エラー)
 *   引数   : char[] path ディレクトリへのパス
 *            
 *   解説   : ディレクトリをオープンし、ファイル番号を返す。
 */
public int openDir(char[] path);

/*----------------------------------------------------------------------------
 *   名前   : close
 *   戻り値 : int (0=正常、-1=エラー)
 *   引数   : int fd オープン済みファイル番号
 *   解説   : ファイル/ディレクトリをクローズする
 */
public int close(int fd);

/*----------------------------------------------------------------------------
 *   名前   : read
 *   戻り値 : int (読み込んだバイト数(>0)、0=EOF、-1=エラー)
 *   引数   : int fd オープン済みファイル番号
 *            void[] buf データを読み込むバッファ
 *            int len バッファサイズ(バイト単位)
 *   解説   : ファイルからデータを読み込む
 *            # 512バイト単位のリードしかサポートしていない
 */
public int read(int fd, void[] buf, int len);

/*----------------------------------------------------------------------------
 *   名前   : readDir
 *   戻り値 : int (1=正常、0=EOF、-1=エラー)
 *   引数   : int fd オープン済みファイル番号
 *            dir ディレクトリエントリを読み込むバッファ
 *            次のようなプログラムで準備しておく
 *              -----------------------------------------------------------
 *              DIR dir = malloc(sizeof(DIR));
 *              dir.name = malloc(13);             // 8+1+3+1 の 13文字分必要
 *              readDir(fd, dir);
 *              -----------------------------------------------------------
 *            DIR 構造体は次のようなもの
 *              struct DIR {
 *                char[] name; //ファイル名(C--型文字列 "aaaa.txt" のような形式)
 *                int    attr; //ファイルの属性(0x10 ならディレクトリ)
 *                int    clst; //ファイルの開始クラスタ番号
 *                int    lenH; //ファイルの長さ上位 16bit
 *                int    lenL; //ファイルの長さ下位 16bit
                }
 *   解説   : ファイルからデータを読み込む
 */
public int readDir(int fd, DIR dir);

/*----------------------------------------------------------------------------
 *   名前   : write
 *   戻り値 : int (書き込んだバイト数(>=0)、-1=エラー)
 *   引数   : int fd オープン済みファイル番号
 *            void[] buf 書き込むデータ
 *            int len データサイズ(バイト単位)
 *   解説   : ファイルへからデータを書き込む
 *            # まだ、実装していない
 */
public int write(int fd, void[] buf, int len);

/*----------------------------------------------------------------------------
 *   ファイルシステム・サーバプロセスの初期化とプロセスのメインルーチン
 */
public void fatFsInit();
public void fatFsMain();
