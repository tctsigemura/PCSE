fatFs パッケージのサブ・パッケージとクラスの解説 (fatFs/class.txt : 2015.05.10)
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
 hdd.cmm : ハードディスクのデバイスドライバ・サブ・パッケージ
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
ハードディスクデバイスドライバ・クラス

名称 : HDD

目的 : ハードディスク(マイクロドライブ)を操作する

属性 : -hddSem    : int16		割込みルーチンとの同期用セマフォの番号

操作： -error()      : void		エラー発生時システムを停止する

       -waitStat(      			Alternate Statusが目的の値になるまで待つ
	 in msk : int,			  msk ：着目するビット
	 in val : int			  val ：目的の値
	) : void

       -chkErr()     : void		コマンド終了時 Status を読みエラーが
      		      			  発生していないことを確認する

       -hddIntr()    : interrupt	ハードディスク割込みルーチン

       -sendDevSel() : void		デバイスセレクションプロトコルを実行する

       -sendPioInCmd(  			PIO data in command プロトコルを実行する
          in cmd : int,		  	  cmd ：ハードウェアにセットする値
	  in fe  : int,			  fe  ：ハードウェアにセットする値
	  ...	   			  ...
	):void

       +hddRead(     			READ SECTOR コマンドを実行する
          in lbaH : int,		  lbaHセクタアドレス上位16ビット
	  in lbaL : int,		  lbaL セクタアドレス下位16ビット
	  out buf : char[]		  buf データを入力するバッファ
	) : void

       +hddInit()    : void		ハードディスクドライバの初期化ルーチン

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
 blkFile.cmm : クラスタ単位で操作する下位ファイルシステム・サブ・パッケージ
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
ファイルシステム基本情報クラス

名称：META

目的：使用する FAT16 ファイルシステムの基本情報を読込み保持する

属性：~sctPrClst : int16		クラスタあたりのセクタ数
      ~bpbLba    : int32		BPB の開始 LBA
      ~fatLba    : int32		FAT の開始 LBA
      ~rootLba   : int32		ルートディレクトリの開始 LBA
      ~dataLba   : int32		データ領域の開始 LBA

操作：-readMBR() : void			MBR を読込み bpbLba を決定する
      -readBPB() : void			BPB を読み他の基本情報を決定する
      +readMeta(): void			MBR と BPB を読み込む

-------------------------------------------------------------------------------
ファイルアロケーションテーブルクラス

名称：FAT

目的：FAT を読んで次のクラスタ番号を決める

属性：-fatCch    : int[256]		FAT の一部、1セクタ分格納するキャッシュ
      -fSct	 : int			fatCch に格納しているセクタの番号

操作：+nextClst(			FAT を読んで次のクラスタ番号を求める
	 in clst : int			  clst : 現在のクラスタ番号
       ) : int                            返値 : 次のクラスタ番号


-------------------------------------------------------------------------------
ブロック(クラスタ)単位で操作できるファイルクラス

名称：BLKFILE

目的：FAT で管理されたブロック(セクタ)単位で操作できるファイルを提供する

解説：ファイルの名前ではなく、開始クラスタでファイルを指定する。
      例外的にクラスタ 0 は、ルートディレクトリを意味する。
      ファイルの長さはクラスタ単位で管理されている。
      データの読み書きはセクタ単位で行う。


属性：-clst	: int			現在のクラスタ
      -sct	: int			現在のセクタ(クラスタ内の番号)

操作：-fdToBlkFile(			ファイル番号から BLKFILE に変換する
	 in fd:int			  fd : ファイル番号
       ) : BLKFILE			  返値 : ファイルオブジェクト、
       	   				         null=エラー

      +openBlkFile(			新しい BLKFILE オブジェクトを割付ける
         in clst:int			  clst : ファイルの開始クラスタ
       ):int	      			  返値 : ファイル番号、-1=エラー

      +closeBlkFile(			BKLFILE オブジェクトを破棄する
         in fd : int			  fd : 破棄するファイルの番号
       ) : int 	 			  返値 : 0=正常、-1=エラー


      +readBlk(	       			ブロックファイルから次のセクタを読む
         in fd : int,	                  fd  : ファイル番号
	 out buf : char[256]              buf : セクタを読み出すバッファ
       ) : int				  返値 : 1=正常、0=EOF、-1=エラー

-------------------------------------------------------------------------------
パッケージ全体の初期化

      +blkFileInit():void

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
 fatSys.cmm:ファイル名とバイトで操作する上位ファイルシステム・サブ・パッケージ
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
ファイル名操作クラス

名称 : STRUTIL

目的 : ファイル名操作に必要な関数を集めたクラス

属性 : 

操作： ~toUpper(			英小文字だけを英大文字に変換
          in c char			  c   ：変換したい文字
        ) : char 			  返値：変換した文字

       ~strnncmp(			バイト文字列とC--文字列を比較する
          in s1 : int[],		  s1  ：ディスクから読んだバイト文字列
	  in offs : int,		  offs：s1 文字列の比較開始位置(バイト)
	  in s2 : char[],		  s2  ：C--文字列
	  in len : int			  len ：C--比較する最大文字数
	) : int	   			  返値：>0:s1の方が大きい、=0:同じ、
						<0:s2の方が大きい

       -isDelm(				ファイル名の区切り文字('/','.','\0')か？
          in c : char			  c   ：確かめる文字
        ) : boolean			  返値：true 区切り文字

       ~getFStr(			ファイル名文字列をパスから切り出す
          in path : char[],		  path：パス(C--文字列)
	  in ptr : int,			  ptr ：パスの着目位置
	  out str : char[],		  str ：読み出すバッファ(C--文字列)
	      	    			        n に足らないときは' 'でうめる
	  in n : int			  n   ：バッファに格納できる最大文字数
	) : int	 			  返値：解析終了場所の次の位置

       ~getFname(			パスからファイル名を8+3形式で読み出す
          in path : char[],		  path：パス(C--文字列)
	  in ptr : int,			  ptr ：パスの着目位置
	  out fname : char[],		  fname：ファイル名(8文字)を読出す
	  out fext : char[]		  fext：拡張子(3文字)を読み出す
	) : int

-------------------------------------------------------------------------------
パス探索クラス

名称：SRCHDIR

目的：パス名に従いディレクトリ構造を探索する。目的のファイルが見付かったら
       ファイルの属性情報を読み出す。

解説：ファイル名は MS-DOS 形式の 8+3 で表現する。
      8文字以上のファイル名、3文字以上の拡張子入力の場合、超過文字を無視する。
      カレントディレクトリ('.)'、親ディレクトリ('..')の解析には対応していない。
      拡張子が２重以上の場合は、最初のもの以外を無視する。

属性：

操作 : -srchDir(			ディレクトリからファイルを探す
          in name : char[],		  name：探すファイルの名前
	  in ext : char[],		  ext ：探すファイルの拡張子
	  inout dir:DIR			  dir ：探す対象ディレクトリの開始
	  				        セクタ番号を受取り、ファイルが
						見付かった場合は見つけたファイ
						ルに関する情報を返す
	):boolean			  返値：true 見付かった

       ~srchPath(			パスを辿りファイルやディレクトリを探す
          int path : char[],		  path：探すファイルを表すパス
	  out dir : DIR			  dir ：ファイルが見付かったとき
						  ファイルに関する情報を返す
	) : boolean			  返値：true 見付かった

-------------------------------------------------------------------------------
ファイル名とバイト単位で操作できるファイルクラス

名称 : FILE

目的 : ユーザが使いやすいファイルを提供する

属性 : -buffer	: char[BLKSIZ]		１セクタ分のバッファ
       -bufPtr  : int			バッファ中の現在位置
       -isDir	: boolean		ファイルはディレクトリか通常ファイルか
       -len	: int32			ファイルの残りの長さ

操作 : -fdToFile(                       ファイル番号からFILEオブジェクトに変換
          in fd : int			  fd  ： ファイル番号
	) : FILE  			  返値：ファイルオブジェクト(null=エラ)

       +sysOpen(			パスのファイルを探し、見付かったら
					  FILE オブジェクトを割り付ける
          in mod : int,			  mod ：READ/WRITE(READのみサポート)
	  in path : char[]                path：ファイルを表すパス
        ) : int                           返値：ファイル番号(-1=エラー)

       +sysOpenDir(			パスのディレクトリを探し、見付かったら
       					  FILE オブジェクトを割り付ける
          in path : char[]		  path：ディレクトリを表すパス 
	) : int	    			  返値：ファイル番号(-1=エラー)

       +sysClose(			FILE オブジェクトを破棄し
       					  ファイル／ディレクトリをクローズする
          in fd : int			  fd  ：オープン済みのファイル番号
	) : int	  			  返値：0=正常、-1=エラー

       +sysRead(			ファイルからデータを読む
          in fd : int,			  fd  ：オープン済みのファイル番号
	  out buf : char[],		  buf ：データを読み出すバッファ
	  out len : int			  len ：バッファの長さ(バイト単位)
	) : int	    			  返値：読み出したデータのバイト数

       -getDirEnt(			ディスクから読み出したディレクトリエン
       					トリから、必要な情報を取り出す。
          in buf : char[],		  buf ：ディスクから読み出した
	     	   			        ディレクトリエントリの配列
	  in ptr : int,			  ptr ：buf内の着目位置
	  out dir : DIR			  dir ：ディレクトリから読み出した
						情報を格納するバッファ
	) : void

       +sysReadDir(			ディレクトリからディレクトリエントリを
       					  順に読み出す
          in fd : int,			  fd  ：オープン済みのファイル番号
	  out dir : DIR			  dir ：読み出したエントリ
	) : int	    			  返値：1=正常、0=EOF、-1=エラー

       +sysWrite(			ファイルにデータを書き込む
          in fd : int,			  fd  ：オープン済みファイル番号
	  in buf : char[],		  buf ：書き込むデータ
	  in len : int			  len ：書き込むデータの長さ
	) : int	   			  返値：>=0:書込んだバイト数、-1=エラー
