/*
 * TaC-OS Source Code
 *    Tokuyama kousen Advanced educational Computer
 *
 * Copyright (C) 2008-2010 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * util.cmm : C-- が動くために必要な関数群
 *
 * 2011.05.25           : malloc、free を削除(TaC-OS のシステムコールに変更)
 * 2011.05.14           : panic を追加
 * 2010.07.20           : Subversion による管理を開始
 * 2010.03.12 v0.0.3    : public 修飾子を追加
 * 2009.11.05 v0.0.2    : バイト配列関係の関数を追加
 * 2009.04.16 v0.0.1    : Boot 用に書き換え
 * 2008.08              : Kernel 用初期バージョン
 *
 * $Id$
 *
 */

#include "util.h"
/*
 * 入出力ルーチン
 */
char[] __hstr = "0123456789abcdef";
int  __putnum_w;
int  __putnum_b;
char __putnum_p;
boolean __putnum_m;

void __putnum_sub(int x, int n) {
  if (x!=0) {
    __putnum_sub(x/__putnum_b, n+1);
    putch(__hstr[x%__putnum_b]);
  } else {
    if (__putnum_m&&__putnum_p!=' ') putch('-');
    if (n==0) __putnum_w = __putnum_w - 1;
    while (__putnum_w>n) {
      putch(__putnum_p);
      __putnum_w = __putnum_w - 1;
    }
    if (__putnum_m&&__putnum_p==' ') putch('-');
    if (n==0) putch('0');
  }
}
    
void __uputnum(int x, int w, char p, int base) {
  __putnum_b = base;
  __putnum_m = false;
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);
}

void __sputnum(int x, int w, char p, int base) {
  __putnum_b = base;
  __putnum_m = false;
  if (x<0) {
    x = -x;
    __putnum_m = true;
    w = w - 1;
  }
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);
}

public void putdec(int x, int w, char p) {
  __sputnum(x,w,p,10);
}

public void puthex(int x, int w, char p) {
  __uputnum(x,w,p,16);
}

public int printf(char[] fmt, ...) {
  int[] args = __args();
  int n=0;
  int arg = args[0];
  for (int i=0; fmt[i]!='\0'; i=i+1) {
    char c = fmt[i];
    if (c=='%') {
      c = fmt[i=i+1];
      int  p = ' ';
      if (c=='0') p='0';
      int  w = 0;
      while ('0'<=c && c<='9') {
        w = w * 10 + c - '0';
	c = fmt[i=i+1];
      }
      if (c=='\0') {
        return n;
      } else if (c=='o') {
        __uputnum(arg,w,p,8);
	arg = args[n=n+1];
      } else if (c=='d') {
        __sputnum(arg,w,p,10);
	arg = args[n=n+1];
      } else if (c=='x') {
        __uputnum(arg,w,p,16);
	arg = args[n=n+1];
      } else if (c=='c') {
        putch(arg);
	arg = args[n=n+1];
      } else if (c=='s') {
        putstr(__ItoA(arg));
	arg = args[n=n+1];
      } else if (c=='%') {
        putch('%');
      } else {
        putch(c);
      }
    } else 
      putch(c);
  }
  return n;
}

/*
 * 16bit int 配列をバイト配列とみなして 1 バイト読み出す
 */
public int byte(int[] b, int x) {
  int v = b[ x >> 1 ];
  if ((x & 1) == 0)                      // 偶数アドレスは
    return v & 0x00ff;                   // 下位アドレス
  return (v >> 8) & 0x00ff;              // 奇数番は上位アドレス
}

public void panic(char[] msg, ...) {
  di();                                         // 割り込み禁止
  int[] args = __args();
  printf("panic:");
  printf(msg, args[0], args[1], args[2]);
  putch('\n');
  for(;;);                                      // システムを停止する
}


/*
 * 文字列sを文字列dにコピーする
 */
public void strcpy(char[] d, char[] s, char eos) {
  int i;
  for (i=0; s[i]!=eos; i=i+1) {
    d[i] = s[i];
  } 
  d[i] = '\0';
}

/*
 *  文字列sと文字列dを比較する
 */
public int strcmp(char[] d, char[] s) {
  int i=0;
  for (; s[i]!='\0'; i=i+1) {
    if (d[i] == '\0') { return 0; }
    if (s[i] != d[i]) { return 0; }
  }
  if (d[i] != '\0') { return 0; }   // s[END]==d[END]=='\0'でないなら
  return 1;
}